datasource db {
  // provider     = "mysql"
  // url          = env("DATABASE_URL")
  provider     = "mongodb"
  url          = env("MONGODB_URI")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["FullTextSearch", "fullTextIndex"]
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean? @default(false)

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  // userId String @db.ObjectId
  // user   User   @relation(fields: [userId], references: [id])

  chapters     Chapter[]
  attachments  Attachment[]
  //  resourses instead
  // userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Users {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  firstName String
  lastName  String?
  email     String  @unique
  // courses   Course[] // Relation to the Course model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

// model UserCourse {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   userId   String?
//   courseId String?
// }

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  order       Int?
  description String?

  activities Activity[]

  courseId String @db.ObjectId
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String?

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Activity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  order       Int? //order
  isPublished Boolean? @default(false) //isadded
  isFree      Boolean? @default(false)

  muxData MuxData?
  
  userProgress UserProgress[]

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model MuxData {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String

  activityId String   @unique @db.ObjectId
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  courseId String @db.ObjectId
  chapterId  String @db.ObjectId

  activityId String @db.ObjectId
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  // courseId String @db.ObjectId
  // course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  isCompleted     Boolean? @default(false)
  progress        Float?
  activityCompleted Boolean?
  TimeStamp String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, activityId])
  @@index([courseId])
}
